name: Integration & E2E Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # Run comprehensive tests nightly
    - cron: '0 3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "23"
  PNPM_VERSION: "10.13.1"

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      # Mock external services for testing
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: geist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        test-suite: [auth, storage, api, livestore]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Setup test environment
        run: |
          # Create test environment files
          cat > apps/webapp/.env.test << EOF
          NODE_ENV=test
          VITE_LIVESTORE_SYNC_URL=http://localhost:8787
          VITE_LIVESTORE_STORE_ID=test-store
          VITE_HOST=localhost:4173
          DATABASE_URL=postgresql://postgres:testpass@localhost:5432/geist_test
          EOF

      - name: Run Auth Integration Tests
        if: matrix.test-suite == 'auth'
        run: |
          echo "🔐 Running authentication integration tests..."
          pnpm --filter @geist-filecoin/auth run test:integration
        env:
          TEST_DATABASE_URL: postgresql://postgres:testpass@localhost:5432/geist_test

      - name: Run Storage Integration Tests
        if: matrix.test-suite == 'storage'
        run: |
          echo "💾 Running storage integration tests..."
          pnpm --filter @geist-filecoin/storage run test:integration
        env:
          LIGHTHOUSE_API_KEY: ${{ secrets.LIGHTHOUSE_API_KEY || 'test-key' }}

      - name: Run API Integration Tests
        if: matrix.test-suite == 'api'
        run: |
          echo "🌐 Running API integration tests..."
          # Start the development server in background
          pnpm --filter @geist-filecoin/webapp run dev &
          SERVER_PID=$!
          
          # Wait for server to be ready
          sleep 30
          
          # Run API tests
          pnpm --filter @geist-filecoin/webapp run test:api
          
          # Cleanup
          kill $SERVER_PID || true

      - name: Run LiveStore Integration Tests
        if: matrix.test-suite == 'livestore'
        run: |
          echo "🔄 Running LiveStore integration tests..."
          pnpm --filter @geist-filecoin/webapp run test:livestore

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.test-suite }}
          path: |
            apps/webapp/coverage/
            packages/*/coverage/
            test-results/
          retention-days: 7

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        browser: [chromium, firefox]
        shard: [1, 2, 3]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter @geist-filecoin/webapp exec playwright install ${{ matrix.browser }} --with-deps

      - name: Build application
        run: pnpm run build

      - name: Start application server
        run: |
          pnpm --filter @geist-filecoin/webapp run preview &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
          
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:4173; do sleep 2; done'

      - name: Run E2E tests
        run: |
          pnpm --filter @geist-filecoin/webapp exec playwright test \
            --project=${{ matrix.browser }} \
            --shard=${{ matrix.shard }}/3 \
            --reporter=html,github
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-shard-${{ matrix.shard }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-shard-${{ matrix.shard }}
          path: |
            apps/webapp/playwright-report-${{ matrix.browser }}-shard-${{ matrix.shard }}/
            apps/webapp/test-results/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # Visual regression testing
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Run visual regression tests
        uses: chromaui/action@v11
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build
          exitOnceUploaded: true
          onlyChanged: true
        continue-on-error: true

  # Performance regression testing
  performance-regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4


      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Run performance benchmarks
        run: |
          echo "🚀 Running performance regression tests..."
          
          # Start the preview server
          pnpm --filter @geist-filecoin/webapp run preview &
          SERVER_PID=$!
          
          # Wait for server
          sleep 30
          
          # Run Lighthouse CI with performance budgets
          npx @lhci/cli@0.12.x autorun
          
          # Cleanup
          kill $SERVER_PID || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-regression-results
          path: |
            .lighthouseci/
          retention-days: 7

  # Test results aggregation
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results-*'
        continue-on-error: true

      - name: Create comprehensive test summary
        run: |
          echo "## 🧪 Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Run**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Integration Tests Results
          echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "| Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          suites=("auth" "storage" "api" "livestore")
          for suite in "${suites[@]}"; do
            if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
              echo "| $suite | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $suite | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # E2E Tests Results
          echo "### End-to-End Tests" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          browsers=("chromium" "firefox")
          for browser in "${browsers[@]}"; do
            if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
              echo "| $browser | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $browser | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          if [[ "${{ needs.integration-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "### ✅ Overall Status: All Tests Passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Overall Status: Some Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed tests and fix any issues before merging." >> $GITHUB_STEP_SUMMARY
          fi