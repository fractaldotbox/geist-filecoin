name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "23"

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: |
          echo "## 🔍 Dependency Audit Results" >> audit-results.md
          echo "" >> audit-results.md
          
          # Run audit and capture results
          if pnpm audit --audit-level moderate --json > audit.json 2>&1; then
            echo "✅ No moderate or high severity vulnerabilities found" >> audit-results.md
          else
            echo "⚠️ Vulnerabilities detected:" >> audit-results.md
            echo "" >> audit-results.md
            echo '```json' >> audit-results.md
            cat audit.json >> audit-results.md
            echo '```' >> audit-results.md
            
            # Check if there are high/critical vulnerabilities
            if grep -q '"severity":\s*"high"\|"severity":\s*"critical"' audit.json; then
              echo "❌ High or critical vulnerabilities found!"
              exit 1
            fi
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            audit-results.md
            audit.json
          retention-days: 30

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --no-update

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
          retention-days: 30

      - name: Advanced secret patterns check
        run: |
          echo "## 🔐 Advanced Secret Patterns Check" > secret-patterns-report.md
          echo "" >> secret-patterns-report.md
          
          # Check for common secret patterns
          patterns=(
            "CLOUDFLARE_API_TOKEN"
            "LIGHTHOUSE_API_KEY"
            "GEIST_JWT_SECRET"
            "password\s*=\s*['\"][\w\d]+"
            "secret\s*=\s*['\"][\w\d]+"
            "api[_-]?key\s*=\s*['\"][\w\d]+"
            "bearer\s+[a-zA-Z0-9\-\.=]+"
          )
          
          suspicious_files=()
          
          for pattern in "${patterns[@]}"; do
            echo "Checking pattern: $pattern" >> secret-patterns-report.md
            if grep -r -i -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" --exclude="*.yml" --exclude="*.yaml" 2>/dev/null; then
              echo "⚠️ Potential secret pattern found: $pattern" >> secret-patterns-report.md
              suspicious_files+=($(grep -r -l -i -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" --exclude="*.yml" --exclude="*.yaml" 2>/dev/null || true))
            else
              echo "✅ Pattern not found: $pattern" >> secret-patterns-report.md
            fi
            echo "" >> secret-patterns-report.md
          done
          
          if [ ${#suspicious_files[@]} -gt 0 ]; then
            echo "❌ Suspicious files found with potential secrets!" >> secret-patterns-report.md
            printf "%s\n" "${suspicious_files[@]}" >> secret-patterns-report.md
            echo "WARNING: Manual review required for the above files." >> secret-patterns-report.md
            exit 1
          else
            echo "✅ No suspicious secret patterns detected." >> secret-patterns-report.md
          fi

      - name: Upload secret patterns report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-patterns-report
          path: secret-patterns-report.md
          retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [javascript-typescript]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4


      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for analysis
        run: pnpm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create temporary Dockerfile for scanning
        run: |
          cat > Dockerfile.scan << 'EOF'
          FROM node:23-alpine
          
          WORKDIR /app
          
          # Copy package files
          COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
          COPY apps/webapp/package.json ./apps/webapp/
          COPY packages/*/package.json ./packages/*/
          
          # Install pnpm
          RUN npm install -g pnpm@10.13.1
          
          # Install dependencies
          RUN pnpm install --frozen-lockfile
          
          # Copy source code
          COPY . .
          
          # Build application
          RUN pnpm run build
          
          EXPOSE 8787
          CMD ["pnpm", "--filter", "@geist-filecoin/webapp", "run", "preview"]
          EOF

      - name: Build Docker image for scanning
        run: docker build -f Dockerfile.scan -t geist-app:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'geist-app:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Clean up
        if: always()
        run: |
          docker rmi geist-app:security-scan || true
          rm -f Dockerfile.scan

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, codeql-analysis]
    if: always()
    
    steps:
      - name: Download audit results
        uses: actions/download-artifact@v4
        with:
          name: dependency-audit-results
        continue-on-error: true

      - name: Create security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f audit-results.md ]]; then
            echo "### Dependency Audit Details" >> $GITHUB_STEP_SUMMARY
            cat audit-results.md >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if any critical scans failed
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || 
             [[ "${{ needs.secret-scan.result }}" == "failure" ]] || 
             [[ "${{ needs.codeql-analysis.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Action Required**: One or more security scans failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All security scans passed successfully!" >> $GITHUB_STEP_SUMMARY
          fi